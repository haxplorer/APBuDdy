#!/usr/bin/env ruby

require "Classes.rb"




#Checks for GNU Configure script and creates the configure, make and install phases
def gnu_configure_check_create()
	credit=0
	if FileTest.exist?("configure")
		credit=10
		if FileTest.exist?("configure.in")
		credit+=30
		end
		if (File.new("configure").read=~/Generated by GNU Autoconf/)
		credit+=30
		end
	end
	configure_queue = Array.new
	configure_queue.push(generate_configure_phase(Pkgvars.get_configure_args,Pkgvars.get_extra_configure_args))
	configure_queue.push(generate_make_phase(Pkgvars.get_make_args))
	configure_queue.push(generate_install_phase(Pkgvars.get_install_args))
	return configure_queue
end

#Create and fill in the configure phase's contents.
#Does not take care to evaluate the presence of configure.
#The calling function must call it in a suitable way based on the credits.
def generate_configure_phase(configure_args,extra_configure_args)
	steps = "./configure \\"
	configure_args.each_with_index do |arg,i| 
		if (i!=(arg.size-1)||extra_configure_args.size!=0)
			steps.concat("#{arg} \\")
		else
			steps.concat(arg)
		end
	end
        extra_configure_args.each_with_index do |arg,i| 
		if (i!=(arg.size-1))
			steps.concat("#{arg} \\")
                else
			steps.concat(arg)
                end
        end
	configure_phase = Phase.new("gnu_configure",steps)
	return configure_phase
end

#Create and fill in the make phase's contents.
#Does not take care to evaluate the presence of make.
#The calling function must call it in a suitable way based on the credits.
def generate_make_phase(make_args)
	steps = "make "
	make_args.each_with_index do |arg,i| 
		steps.concat("#{arg} ")
	end
	make_phase = Phase.new("gnu_make",steps)
        return make_phase
end

#Create and fill in the install phase's contents.
#Does not take care to evaluate the presence of install.
#The calling function must call it in a suitable way based on the credits.
def generate_install_phase(install_args)
	steps = "make "
        install_args.each_with_index do |arg,i| 
		steps.concat("#{arg} ")
        end
	steps.concat("DESTDIR=#{Sysvars.get_rpm_build_root} ")
	steps.concat("install")
	install_phase = Phase.new("gnu_install",steps)
        return install_phase
end

