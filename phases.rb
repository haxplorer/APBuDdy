#!/usr/bin/env ruby

require "Classes.rb"

#Checks for GNU Configure script and creates the configure, make and install phases
def gnu_configure_check()
	credit=0
	if FileTest.exist?("#{Sysvars.get_extracted_dir}/configure")
		credit=10
		if FileTest.exist?("#{Sysvars.get_extracted_dir}/configure.in")
		credit+=30
		end
		if (File.new("#{Sysvars.get_extracted_dir}/configure").read=~/Generated by GNU Autoconf/)
		credit+=30
		end
	end
	return credit
end

#Create and fill in the configure phase's contents.
#Does not take care to evaluate the presence of configure.
#The calling function must call it in a suitable way based on the credits.
def generate_configure_phase()
	configure_args = Pkgvars.get_configure_args
	extra_configure_args = Pkgvars.get_extra_configure_args
	steps = "./configure \\"
	configure_args.each_with_index do |arg,i| 
		if (i!=(arg.size-1)||extra_configure_args.size!=0)
			steps.concat("#{arg} \\")
		else
			steps.concat(arg)
		end
	end
        extra_configure_args.each_with_index do |arg,i| 
		if (i!=(arg.size-1))
			steps.concat("#{arg} \\")
                else
			steps.concat(arg)
                end
        end
	configure_phase = Phase.new("gnu_configure",steps)
	return configure_phase
end

#Create and fill in the make phase's contents.
#Does not take care to evaluate the presence of make.
#The calling function must call it in a suitable way based on the credits.

def gnu_make_check()
        credit=0
        if FileTest.exist?("#{Sysvars.get_extracted_dir}/Makefile")
                credit=60
        end
	return credit
end

def generate_make_phase()
	make_args = Pkgvars.get_make_args
	steps = "make "
	make_args.each_with_index do |arg,i| 
		steps.concat("#{arg} ")
	end
	make_phase = Phase.new("gnu_make",steps)
        return make_phase
end

#Create and fill in the install phase's contents.
#Does not take care to evaluate the presence of install.
#The calling function must call it in a suitable way based on the credits.

def gnu_install_check()
        credit=0
        if FileTest.exist?("#{Sysvars.get_extracted_dir}/Makefile")
                credit=30
		if File.new("#{Sysvars.get_extracted_dir}/Makefile").read =~ /install/
                credit+=30
                end
        end
        return credit
end

def generate_install_phase()
	install_args = Pkgvars.get_install_args
	steps = "make "
        install_args.each_with_index do |arg,i| 
		steps.concat("#{arg} ")
        end
	steps.concat("DESTDIR=#{Sysvars.get_rpm_build_root}/#{Pkgvars.get_pkg_name} ")
	steps.concat("install")
	install_phase = Phase.new("gnu_install",steps)
        return install_phase
end

def perl_check()
        credit=0
        if FileTest.exist?("Makefile.PL")
                credit=30
		if File.new("Makefile.PL").read =~ /all/
			credit+=30
		end
        end

end

def generate_perl_makefile()
        steps = "perl Makefile.PL"
        perl_phase = Phase.new("perl",steps)
        return perl_phase

end
